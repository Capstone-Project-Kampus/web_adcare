swagger: "2.0"
info:
  title: "API Documentation"
  version: "1.0"
  description: "API Documentation For AdCare Apps."

tags:
  - name: "authentication"
    description: "Endpoints related to authentication and authorization"
  - name: "videos"
    description: "Video management endpoints"
  - name: "psikiaters"
    description: "Psikiater management endpoints"
  - name: "detection"
    description: "Detection-related endpoints"

paths:
  /api/auth/register:
    post:
      tags:
        - "authentication"
      summary: "Register a new user"
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: "User's email address"
              username:
                type: string
                description: "User's username"
              password:
                type: string
                description: "User's password"
      responses:
        201:
          description: "User registered successfully"
          schema:
            type: object
            properties:
              msg:
                type: string
                description: "Message indicating the registration status"
                example: "Registrasi berhasil"
        400:
          description: "Email, username, or password is missing or user already exists"
          schema:
            type: object
            properties:
              msg:
                type: string
                description: "Message indicating the error"
                example: "Pengguna sudah ada"

  /api/auth/login:
    post:
      tags:
        - "authentication"
      summary: "User login"
      consumes:
        - application/json
      parameters:
        - in: body
          name: credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: "User's email address"
              password:
                type: string
                description: "User's password"
      responses:
        200:
          description: "Login successful"
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: "JWT access token for authenticated requests"
              refresh_token:
                type: string
                description: "JWT refresh token to obtain new access tokens"
              id:
                type: string
                description: "User's unique identifier"
              email:
                type: string
                description: "User's email address"
        401:
          description: "Invalid credentials"
          schema:
            type: object
            properties:
              msg:
                type: string
                description: "Error message indicating login failure"
                example: "Kredensial tidak valid"

  /api/auth/profile:
    get:
      tags:
        - "authentication"
      summary: "Get user profile"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "User profile retrieved successfully"
          schema:
            type: object
            properties:
              username:
                type: string
                description: "User's username"
              email:
                type: string
                description: "User's email address"
        400:
          description: "User not found"
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message"
                example: "Pengguna tidak ditemukan"

  /api/auth/refresh:
    post:
      tags:
        - "authentication"
      summary: "Obtain a new access token using refresh token"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully obtained new access token"
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Confirmation message"
                example: "Refresh token"
              access_token:
                type: string
                description: "New JWT access token for authenticated requests"

  /api/videos/all-video:
    get:
      tags:
        - "videos"
      summary: "Get all videos"
      description: "Retrieve a list of all videos"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully retrieved videos"
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Response message"
              data:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: "Unique identifier for the video"
                    title:
                      type: string
                      description: "Title of the video"
                    url:
                      type: string
                      description: "URL of the video"
                    description:
                      type: string
                      description: "Optional description of the video"
        401:
          description: "Unauthorized - Invalid or missing JWT token"

  /api/videos/create:
    post:
      tags:
        - "videos"
      summary: "Create a new video"
      description: "Create a new video entry"
      security:
        - bearerAuth: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: video
          required: true
          schema:
            type: object
            required:
              - title
              - url
            properties:
              title:
                type: string
                description: "Title of the video"
              url:
                type: string
                description: "URL of the video"
              description:
                type: string
                description: "Optional description of the video"
      responses:
        201:
          description: "Video created successfully"
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Success message"
              data:
                type: object
                properties:
                  _id:
                    type: string
                    description: "Unique identifier of the created video"
                  title:
                    type: string
                    description: "Title of the created video"
                  url:
                    type: string
                    description: "URL of the created video"
        400:
          description: "Missing required fields"
        401:
          description: "Unauthorized - Invalid or missing JWT token"
        500:
          description: "Internal server error"

  /api/videos/update/{video_id}:
    put:
      tags:
        - "videos"
      summary: "Update an existing video"
      description: "Update details of a specific video"
      security:
        - bearerAuth: []
      consumes:
        - application/json
      parameters:
        - in: path
          name: video_id
          required: true
          type: string
          description: "Unique identifier of the video to update"
        - in: body
          name: video
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
                description: "New title for the video"
              url:
                type: string
                description: "New URL for the video"
              description:
                type: string
                description: "New description for the video"
      responses:
        200:
          description: "Video updated successfully"
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Success message"
              data:
                type: object
                properties:
                  _id:
                    type: string
                    description: "Unique identifier of the updated video"
                  title:
                    type: string
                    description: "Updated title of the video"
                  url:
                    type: string
                    description: "Updated URL of the video"
        404:
          description: "Video not found"
        401:
          description: "Unauthorized - Invalid or missing JWT token"
        500:
          description: "Internal server error"

  /api/videos/delete/{video_id}:
    delete:
      tags:
        - "videos"
      summary: "Delete a video"
      description: "Delete a specific video by its ID"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: video_id
          required: true
          type: string
          description: "Unique identifier of the video to delete"
      responses:
        200:
          description: "Video deleted successfully"
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Success message"
              data:
                type: object
                properties:
                  _id:
                    type: string
                    description: "ID of the deleted video"
        404:
          description: "Video not found"
        401:
          description: "Unauthorized - Invalid or missing JWT token"
        500:
          description: "Internal server error"

  /api/psikiater/all-psikiater:
    get:
      tags:
        - "psikiaters"
      summary: "Retrieve all psikiaters"
      description: "Fetch a list of all registered psikiaters"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully retrieved psikiaters"
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    nama:
                      type: string
                    foto:
                      type: string
                    biografi:
                      type: string
                    pendidikan:
                      type: string
                    dinas:
                      type: string
                    nomor_hp:
                      type: string
        404:
          description: "No psikiaters found"

  /api/psikiater/create:
    post:
      tags:
        - "psikiaters"
      summary: "Create a new psikiater"
      description: "Add a new psikiater to the system"
      security:
        - bearerAuth: []
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: nama
          type: string
          required: true
          description: "Name of the psikiater"
        - in: formData
          name: biografi
          type: string
          required: true
          description: "Biography of the psikiater"
        - in: formData
          name: pendidikan
          type: string
          required: true
          description: "Educational background of the psikiater"
        - in: formData
          name: dinas
          type: string
          required: true
          description: "Service or department of the psikiater"
        - in: formData
          name: nomor_hp
          type: string
          required: true
          description: "Contact phone number of the psikiater"
        - in: formData
          name: foto
          type: file
          required: false
          description: "Profile photo of the psikiater"
      responses:
        201:
          description: "Psikiater created successfully"
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  id:
                    type: string
                  nama:
                    type: string
                  foto:
                    type: string
        400:
          description: "Missing required fields"
        500:
          description: "Server error during psikiater creation"

  /api/psikiater/update/{psikiater_id}:
    put:
      tags:
        - "psikiaters"
      summary: "Update an existing psikiater"
      description: "Update details of a specific psikiater"
      security:
        - bearerAuth: []
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: psikiater_id
          type: string
          required: true
          description: "Unique identifier of the psikiater to update"
        - in: formData
          name: nama
          type: string
          required: false
          description: "Updated name of the psikiater"
        - in: formData
          name: biografi
          type: string
          required: false
          description: "Updated biography of the psikiater"
        - in: formData
          name: pendidikan
          type: string
          required: false
          description: "Updated educational background of the psikiater"
        - in: formData
          name: dinas
          type: string
          required: false
          description: "Updated service or department of the psikiater"
        - in: formData
          name: nomor_hp
          type: string
          required: false
          description: "Updated contact phone number of the psikiater"
        - in: formData
          name: foto
          type: file
          required: false
          description: "Updated profile photo of the psikiater"
      responses:
        200:
          description: "Psikiater updated successfully"
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  _id:
                    type: string
                  nama:
                    type: string
                  foto:
                    type: string
                  biografi:
                    type: string
                  pendidikan:
                    type: string
                  dinas:
                    type: string
                  nomor_hp:
                    type: string
        400:
          description: "Invalid psikiater ID or no update fields provided"
        404:
          description: "Psikiater not found"
        500:
          description: "Server error during psikiater update"

  /api/psikiater/delete/{psikiater_id}:
    delete:
      tags:
        - "psikiaters"
      summary: "Delete a psikiater"
      description: "Remove a specific psikiater from the system"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: psikiater_id
          type: string
          required: true
          description: "Unique identifier of the psikiater to delete"
      responses:
        200:
          description: "Psikiater deleted successfully"
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  id:
                    type: string
        404:
          description: "Psikiater not found"
        500:
          description: "Server error during psikiater deletion"

  paths:
  /toy/movement:
    post:
      tags:
        - "detection"
      summary: "Post toy movement data"
      consumes:
        - application/json
      parameters:
        - in: body
          name: movement
          required: true
          schema:
            type: object
            properties:
              movement:
                type: string
                description: "Movement type (e.g., fidgeting, normal)"
      responses:
        200:
          description: "Movement status accepted"
          schema:
            type: object
            properties:
              movement:
                type: string
                example: "Fidgeting"
        400:
          description: "Invalid input"
          schema:
            type: object
            properties:
              msg:
                type: string
                example: "Input tidak valid"
  
  /toy/status:
    get:
      tags:
        - "detection"
      summary: "Get toy status based on movement detection"
      responses:
        200:
          description: "Current toy status"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "Normal"


securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: "Enter your bearer token in the format 'Bearer <token>'"

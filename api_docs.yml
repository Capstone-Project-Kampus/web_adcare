swagger: "2.0"
info:
  title: "API Documentation"
  version: "1.0"
  description: "API Documentation For AdCare Apps."

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: "JWT token for authentication. Format: Bearer <token>"
  apiKeyAuth:
    type: apiKey
    name: x-api-key
    in: header
    description: "API key for API access"
    
definitions:
  LoginHistory:
    type: object
    properties:
      _id:
        type: string
        description: "Unique identifier for the login history record"
      user_id:
        type: string
        description: "ID of the user who logged in"
      waktu_login:
        type: string
        format: date-time
        description: "Timestamp when the user logged in"
      device:
        type: string
        description: "Device information (user agent) used during login"
      activity:
        type: string
        description: "Type of login activity (e.g., 'login', 'login with Google')"

tags:
  - name: "authentication"
    description: "Endpoints related to authentication and authorization, including login history tracking"
  - name: "videos"
    description: "Video management endpoints"
  - name: "psikiaters"
    description: "Psikiater management endpoints"
  - name: "general"
    description: "General endpoints"
  - name: "movement"
    description: "Movement tracking endpoints"
  - name: "admin"
    description: "Admin related endpoints"

paths:
  /api/auth/login-history/:
    get:
      tags:
        - "authentication"
      summary: "Get user login history"
      description: "Retrieves the login history for the authenticated user"
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      responses:
        200:
          description: "Login history retrieved successfully"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Login history retrieved successfully"
              data:
                type: array
                items:
                  $ref: "#/definitions/LoginHistory"
              code:
                type: integer
                example: 200
        401:
          description: "Unauthorized - Invalid or missing token/API key"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Unauthorized access"
              code:
                type: integer
                example: 401
                
  /:
    get:
      tags:
        - "general"
      summary: "Home page"
      description: "Renders the index.html template"
      security:
        - apiKeyAuth: []
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Unauthorized - Invalid or missing API key"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid or missing API key"

  /api/auth/register/:
    post:
      tags:
        - "authentication"
      summary: "Register a new user"
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: "User's email address"
              username:
                type: string
                description: "User's username"
              password:
                type: string
                description: "User's password"
            required:
              - email
              - username
              - password
      responses:
        201:
          description: "User registered successfully"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Registration successful"
              data:
                type: object
                properties:
                  user_id:
                    type: string
                    description: "User's unique identifier"
                  username:
                    type: string
                    description: "User's username"
                  email:
                    type: string
                    description: "User's email address"
              code:
                type: integer
                example: 201
        400:
          description: "Email, username, or password is missing"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Email, Username, and Password are required"
              code:
                type: integer
                example: 400
        409:
          description: "User already exists"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "User already exists"
              code:
                type: integer
                example: 409

  /api/auth/login/:
    post:
      tags:
        - "authentication"
      summary: "User login"
      consumes:
        - application/json
      parameters:
        - in: body
          name: credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: "User's email address"
              password:
                type: string
                description: "User's password"
            required:
              - email
              - password
      responses:
        200:
          description: "Login successful"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Login successful"
              data:
                type: object
                properties:
                  access_token:
                    type: string
                    description: "JWT access token for authenticated requests"
                  refresh_token:
                    type: string
                    description: "JWT refresh token to obtain new access tokens"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        description: "User's unique identifier"
                      email:
                        type: string
                        description: "User's email address"
                      username:
                        type: string
                        description: "User's username"
              code:
                type: integer
                example: 200
        400:
          description: "Missing required fields"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Email and password are required"
              code:
                type: integer
                example: 400
        401:
          description: "Invalid credentials"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Invalid credentials"
              code:
                type: integer
                example: 401

  /api/auth/login_with_google/:
    post:
      tags:
        - "authentication"
      summary: "Login with Google"
      description: "Authenticate a user using Google credentials"
      security:
        - apiKeyAuth: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: googleCredentials
          required: true
          schema:
            type: object
            properties:
              token_id:
                type: string
                description: "Google OAuth token ID"
            required:
              - token_id
      responses:
        200:
          description: "Login with Google successful"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Login with Google successful"
              data:
                type: object
                properties:
                  access_token:
                    type: string
                    description: "JWT access token for authenticated requests"
                  refresh_token:
                    type: string
                    description: "JWT refresh token to obtain new access tokens"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      username:
                        type: string
                  api_key:
                    type: string
                    description: "API key for API access"
              code:
                type: integer
                example: 200
        400:
          description: "Missing token_id"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Google token_id is required"
              code:
                type: integer
                example: 400
        401:
          description: "Invalid Google token"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Invalid Google token"
              code:
                type: integer
                example: 401

  /api/auth/profile/:
    get:
      tags:
        - "authentication"
      summary: "Get user profile"
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      responses:
        200:
          description: "User profile retrieved successfully"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Profile retrieved successfully"
              data:
                type: object
                properties:
                  username:
                    type: string
                    description: "User's username"
                  email:
                    type: string
                    description: "User's email address"
              code:
                type: integer
                example: 200
        401:
          description: "Unauthorized - Invalid or missing token/API key"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Invalid or missing API key"
              code:
                type: integer
                example: 401
        404:
          description: "User not found"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "User not found"
              code:
                type: integer
                example: 404

  /api/auth/confirm_email/{token}:
    get:
      tags:
        - "authentication"
      summary: "Confirm user email"
      description: "Confirms a user's email address using the provided token"
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: token
          required: true
          type: string
          description: "Email confirmation token"
      responses:
        200:
          description: "Email confirmed successfully"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Email confirmed successfully"
              code:
                type: integer
                example: 200
        400:
          description: "Invalid or expired token"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Invalid or expired token"
              code:
                type: integer
                example: 400

  /forgot_password/:
    post:
      tags:
        - "authentication"
      summary: "Request password reset"
      description: "Initiates password reset process by sending an email with reset link"
      security:
        - apiKeyAuth: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: forgotPasswordRequest
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: "User's registered email address"
            required:
              - email
      responses:
        200:
          description: "Password reset email sent"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Password reset instructions sent to your email"
              code:
                type: integer
                example: 200
        400:
          description: "Email is missing"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Email is required"
              code:
                type: integer
                example: 400
        404:
          description: "User not found"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "No user found with that email address"
              code:
                type: integer
                example: 404

  /reset_password/{token}/:
    get:
      tags:
        - "authentication"
      summary: "Display password reset form"
      description: "Displays the password reset form if the token is valid"
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: token
          required: true
          type: string
          description: "Password reset token"
      responses:
        200:
          description: "Password reset form displayed"
        400:
          description: "Invalid or expired token"
    post:
      tags:
        - "authentication"
      summary: "Reset user password"
      description: "Updates the user's password when a valid token is provided"
      security:
        - apiKeyAuth: []
      consumes:
        - application/json
      parameters:
        - in: path
          name: token
          required: true
          type: string
          description: "Password reset token"
        - in: body
          name: resetPasswordRequest
          required: true
          schema:
            type: object
            properties:
              password:
                type: string
                description: "New password"
            required:
              - password
      responses:
        200:
          description: "Password reset successful"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Password has been reset successfully"
              code:
                type: integer
                example: 200
        400:
          description: "Invalid token or missing password"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Invalid token or missing password"
              code:
                type: integer
                example: 400

  /api/auth/refresh/:
    post:
      tags:
        - "authentication"
      summary: "Obtain a new access token using refresh token"
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      responses:
        200:
          description: "Successfully obtained new access token"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Token refreshed successfully"
              data:
                type: object
                properties:
                  access_token:
                    type: string
                    description: "New JWT access token for authenticated requests"
              code:
                type: integer
                example: 200
        401:
          description: "Unauthorized - Invalid or missing token/API key"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Invalid or missing API key"
              code:
                type: integer
                example: 401

  /api/videos/all-video:
    get:
      tags:
        - "videos"
      summary: "Get all videos"
      description: "Retrieve a list of all videos"
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      responses:
        200:
          description: "Successfully retrieved videos"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Videos retrieved successfully"
              data:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: "Unique identifier for the video"
                    title:
                      type: string
                      description: "Title of the video"
                    url:
                      type: string
                      description: "URL of the video"
                    description:
                      type: string
                      description: "Optional description of the video"
              code:
                type: integer
                example: 200
        401:
          description: "Unauthorized - Invalid or missing token/API key"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Invalid or missing API key"
              code:
                type: integer
                example: 401

  /api/videos/create:
    post:
      tags:
        - "videos"
      summary: "Create a new video"
      description: "Create a new video entry"
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: video
          required: true
          schema:
            type: object
            required:
              - title
              - url
            properties:
              title:
                type: string
                description: "Title of the video"
              url:
                type: string
                description: "URL of the video"
              description:
                type: string
                description: "Optional description of the video"
      responses:
        201:
          description: "Video created successfully"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Video created successfully"
              data:
                type: object
                properties:
                  _id:
                    type: string
                    description: "ID of the created video"
                  title:
                    type: string
                    description: "Title of the created video"
                  url:
                    type: string
                    description: "URL of the created video"
              code:
                type: integer
                example: 201
        400:
          description: "Missing required fields"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Title and url are required"
              code:
                type: integer
                example: 400
        401:
          description: "Unauthorized - Invalid or missing JWT token"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Invalid or missing JWT token"
              code:
                type: integer
                example: 401
        500:
          description: "Server error during video creation"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Error creating video"
              code:
                type: integer
                example: 500

  /api/videos/update/{video_id}:
    put:
      tags:
        - "videos"
      summary: "Update a video"
      description: "Update an existing video entry"
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      consumes:
        - application/json
      parameters:
        - in: path
          name: video_id
          required: true
          type: string
          description: "Unique identifier of the video to update"
        - in: body
          name: video
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
                description: "New title for the video"
              url:
                type: string
                description: "New URL for the video"
              description:
                type: string
                description: "New description for the video"
      responses:
        200:
          description: "Video updated successfully"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Video updated successfully"
              data:
                type: object
                properties:
                  _id:
                    type: string
                    description: "ID of the updated video"
                  title:
                    type: string
                    description: "Updated title"
                  url:
                    type: string
                    description: "Updated URL"
              code:
                type: integer
                example: 200
        404:
          description: "Video not found"
        401:
          description: "Unauthorized - Invalid or missing JWT token"
        500:
          description: "Internal server error"

  /api/videos/delete/{video_id}:
    delete:
      tags:
        - "videos"
      summary: "Delete a video"
      description: "Delete an existing video entry"
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - in: path
          name: video_id
          required: true
          type: string
          description: "Unique identifier of the video to delete"
      responses:
        200:
          description: "Video deleted successfully"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Video deleted successfully"
              data:
                type: object
                properties:
                  _id:
                    type: string
              code:
                type: integer
                example: 200
        404:
          description: "Video not found"
        401:
          description: "Unauthorized - Invalid or missing JWT token"
        500:
          description: "Internal server error"

  /api/psikiater/all-psikiater:
    get:
      tags:
        - "psikiaters"
      summary: "Get all psikiaters"
      description: "Retrieve a list of all psikiaters"
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      responses:
        200:
          description: "Successfully retrieved psikiaters"
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    nama:
                      type: string
                    foto:
                      type: string
                    biografi:
                      type: string
                    pendidikan:
                      type: string
                    dinas:
                      type: string
                    nomor_hp:
                      type: string
        404:
          description: "No psikiaters found"

  /api/psikiater/create:
    post:
      tags:
        - "psikiaters"
      summary: "Create a new psikiater"
      description: "Create a new psikiater entry"
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: nama
          type: string
          required: true
          description: "Name of the psikiater"
        - in: formData
          name: biografi
          type: string
          required: true
          description: "Biography of the psikiater"
        - in: formData
          name: pendidikan
          type: string
          required: true
          description: "Educational background of the psikiater"
        - in: formData
          name: dinas
          type: string
          required: true
          description: "Service or department of the psikiater"
        - in: formData
          name: nomor_hp
          type: string
          required: true
          description: "Contact phone number of the psikiater"
        - in: formData
          name: foto
          type: file
          required: false
          description: "Profile photo of the psikiater"
      responses:
        201:
          description: "Psikiater created successfully"
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  id:
                    type: string
                  nama:
                    type: string
                  foto:
                    type: string
        400:
          description: "Missing required fields"
        500:
          description: "Server error during psikiater creation"

  /api/psikiater/update/{psikiater_id}:
    put:
      tags:
        - "psikiaters"
      summary: "Update an existing psikiater"
      description: "Update an existing psikiater's information"
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: psikiater_id
          type: string
          required: true
          description: "Unique identifier of the psikiater to update"
        - in: formData
          name: nama
          type: string
          required: false
          description: "Updated name of the psikiater"
        - in: formData
          name: biografi
          type: string
          required: false
          description: "Updated biography of the psikiater"
        - in: formData
          name: pendidikan
          type: string
          required: false
          description: "Updated educational background of the psikiater"
        - in: formData
          name: dinas
          type: string
          required: false
          description: "Updated service or department of the psikiater"
        - in: formData
          name: nomor_hp
          type: string
          required: false
          description: "Updated contact phone number of the psikiater"
        - in: formData
          name: foto
          type: file
          required: false
          description: "Updated profile photo of the psikiater"
      responses:
        200:
          description: "Psikiater updated successfully"
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  _id:
                    type: string
                  nama:
                    type: string
                  foto:
                    type: string
                  biografi:
                    type: string
                  pendidikan:
                    type: string
                  dinas:
                    type: string
                  nomor_hp:
                    type: string
        400:
          description: "Invalid psikiater ID or no update fields provided"
        404:
          description: "Psikiater not found"
        500:
          description: "Server error during psikiater update"

  /api/psikiater/delete/{psikiater_id}:
    delete:
      tags:
        - "psikiaters"
      summary: "Delete a psikiater"
      description: "Delete an existing psikiater"
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - in: path
          name: psikiater_id
          required: true
          type: string
          description: "Psikiater's unique identifier"
      responses:
        200:
          description: "Psikiater deleted successfully"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Psikiater deleted successfully"
              code:
                type: integer
                example: 200
        401:
          description: "Unauthorized - Invalid or missing token/API key"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Invalid or missing token/API key"
              code:
                type: integer
                example: 401
        404:
          description: "Psikiater not found"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Psikiater not found"
              code:
                type: integer
                example: 404

  /api/auth/google:
    post:
      tags:
        - "authentication"
      summary: "Login with Google (Mobile)"
      description: "Authenticate a user using Google credentials (for mobile apps)"
      consumes:
        - application/json
      parameters:
        - in: body
          name: googleCredentials
          required: true
          schema:
            type: object
            properties:
              id_token:
                type: string
                description: "Google OAuth token ID"
            required:
              - id_token
      responses:
        200:
          description: "Login with Google successful"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Login berhasil dengan Google"
              data:
                type: object
                properties:
                  access_token:
                    type: string
                    description: "JWT access token for authenticated requests"
                  refresh_token:
                    type: string
                    description: "JWT refresh token to obtain new access tokens"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      username:
                        type: string
                      profile_picture:
                        type: string
                  api_key:
                    type: string
                    description: "API key for API access"
              code:
                type: integer
                example: 200
        400:
          description: "Missing id_token"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Token ID tidak ditemukan"
              code:
                type: integer
                example: 400
        401:
          description: "Invalid Google token"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Invalid Google token"
              code:
                type: integer
                example: 401
        500:
          description: "Server error"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Database tidak terhubung"
              code:
                type: integer
                example: 500

  /admin/login:
    post:
      tags:
        - "admin"
      summary: "Admin login"
      description: "Authenticates an administrator and starts a session"
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: username
          required: true
          type: string
          description: "Admin username"
        - in: formData
          name: password
          required: true
          type: string
          description: "Admin password"
      responses:
        200:
          description: "Login successful"
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              redirect:
                type: string
                example: "/admin/dashboard"
        401:
          description: "Invalid credentials"
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: "Invalid username or password"

  /api/movement:
    post:
      tags:
        - "movement"
      summary: "Save movement data"
      consumes:
        - application/json
      parameters:
        - in: body
          name: movement
          required: true
          schema:
            type: object
            properties:
              head_move:
                type: integer
              hand_move:
                type: integer
              shoulder_move:
                type: integer
              movement_score:
                type: number
                format: float
      responses:
        200:
          description: "Movement saved successfully"
        400:
          description: "Missing fields"
        500:
          description: "Internal server error"

    description: "Enter your bearer token in the format 'Bearer <token>'"
